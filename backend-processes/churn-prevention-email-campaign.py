"""
# THIS IS A DEMO AND THEREFORE SHOULD NOT BE CONSIDERED PRODUCTION READY.
# This basic python script showcases the use of the Octy API to 
# automate a churn-prevention email campaign; selecting your top customers
# who have been flagged by Octy as 'churning' and sending them personalised emails
# using personal data from the Shopify API and content generated by the Octy messaging API.
# For this demo, Mailjet (https://www.mailjet.com/) has been used as the email service provider, 
# however any email service provider can be used.
# pip install 'mailjet-rest==1.3.4'
# Please follow the marked TODO's to get up and running with this Demo.
"""

#TODO: Create Octy message template
"""
# The message template this demo uses:
{
    "friendly_name": "Retention Campaign",
    "template_type": "email",
    "title": "Just in case you were thinking of leaving us!",
    "content": "Hey {first_name}, \nWe think you might like our range. {ITEM_REC} \nWe know that all the folks from {city} are deal savvy... so we cooked up some deals we know you are going to love!",
    "required_data": [
        "first_name",
        "city"
    ],
    "default_values": {
        "first_name": "there",
        "city": "your city"
    },
    "metadata": {
        "churn_pred": "high"
    }
}
To create this template, provide the above JSON as the body of a POST request to the /v1/retention/messaging/templates/create
Octy Messaging API endpoint. Note, If an Octy recommendations job has yet not completed, remove the ITEM_REC placeholder
from the 'content' parameter before creating this template.
"""

# python imports
import requests
import base64
import json
import os

# external imports
from mailjet_rest import Client

#TODO: Set enviroment variables.
"""
provide required values, copy and execute in a 
terminal to set required enviroment variables for this demo:

export OCTY_PK='xxx' \
export OCTY_SK='xxx' \
export SHOPIFY_API_SECRET='xxx' \
export SHOPIFY_STORE_URL='xxx' \
export MAIL_JET_API_KEY='xxx' \
export MAIL_JET_API_SECRET='xxx'

"""

OCTY_PK=os.environ.get('OCTY_PK')
OCTY_SK=os.environ.get('OCTY_SK')
SHOPIFY_API_SECRET=os.environ.get('SHOPIFY_API_SECRET')
SHOPIFY_STORE_URL=os.environ.get('SHOPIFY_STORE_URL')
MAIL_JET_API_KEY=os.environ.get('MAIL_JET_API_KEY')
MAIL_JET_API_SECRET=os.environ.get('MAIL_JET_API_SECRET')

#TODO: Populate required values
TEMPLATE_ID="some octy template ID" # the ID of the template created using the template object defined above.
FROM_EMAIL="The email addresses emails will be sent from"
FROM_NAME="Your companies name"

def octy_auth_header() -> dict:
    credentials = OCTY_PK+ ":" +OCTY_SK
    return {
        'Authorization' : "Basic {}".format(base64.b64encode(credentials.encode()).decode("utf-8")),
        'Content-Type' : "application/json"
    }

def get_octy_profiles() -> list:
    query_params = "churn_prob=high&rfm=300-400" # high churn probability + top RFM scores
    # NOTE: refer to https://octy.ai/docs/api#RetrieveProfile for the list of available paramters.

    url = "https://api.octy.ai/v1/retention/profiles?"+query_params
    headers = octy_auth_header()
    headers['cursor'] = "0"
    r = requests.get(url=url, headers=headers)
    if r.status_code > 200:
        raise Exception(f"Octy api err -- failed to get profiles. ERROR : {json.loads(r.text)['error']['reason']}")
    
    valid_profiles = list()
    profiles = json.loads(r.text)['profiles']
    shopify_headers = {"X-Shopify-Access-Token" : SHOPIFY_API_SECRET}
    for profile in profiles:

        shopify_url = SHOPIFY_STORE_URL + f"admin/api/2021-07/customers/{profile['customer_id']}.json"
        shopify_r = requests.get(url=shopify_url, headers=shopify_headers)
        try:
            json.loads(shopify_r.text)['errors']
            continue
        except KeyError:
            pass
        
        customer = json.loads(shopify_r.text)['customer']
        if customer['email'] == None or customer['email'] == "":
            continue
        valid_profile = profile
        valid_profile['email'] = customer['email']
        valid_profile['first_name'] = customer['first_name']
        try:
            valid_profile['city'] = customer['addresses'][0]['city']
        except:
            valid_profile['city'] = ""

        valid_profiles.append(valid_profile)

    if len(valid_profiles) < 1:
        raise Exception("No profiles found with matching shopify customer IDs!")

    return valid_profiles
    
def get_octy_template() -> dict :
    # NOTE: There are two options here:
    # 1. Get all templates and find the most appropriate template by assessing the values set in each tempaltes metadata attribute.
    # 2. Specify the name or identifer of the template you wish to use.
    # In this demo, we will specify a template that we know to suitable for 'high-value churning customers'.

    url = "https://api.octy.ai/v1/retention/messaging/templates?id="+TEMPLATE_ID
    headers = octy_auth_header()
    headers['cursor'] = "0"
    r = requests.get(url=url, headers=headers)
    if r.status_code > 200:
        raise Exception(f"Octy api err -- failed to get templates. ERROR : {json.loads(r.text)['error']['reason']}")
    return json.loads(r.text)['templates'][0]

def generate_email_content(template: dict, profiles : list) -> dict:
    url = "https://api.octy.ai/v1/retention/messaging/content/generate"
    headers = octy_auth_header()
    messages=[]

    def _get_content(profile_batch):
        message_batch = list()
        for profile in profile_batch:
            data={}
            for rd in template['required_data']:
                try:
                    data_point = profile[rd]
                except KeyError:
                    data_point = ""
                data[rd] = data_point

            # NOTE: If ITEM_REC placeholder is not set in template, comment out the following line
            # and change the 'item_recommendation'** parameter to False
            data['profile_id'] = profile['profile_id'] 

            message_batch.append(
                {
                    "template_id" : template['template_id'],
                    "item_recommendation" : True, #**
                    "data" : [data]
                }
            )

        body = {
            "messages" : message_batch
        }

        r = requests.post(url=url, headers=headers, data=json.dumps(body))

        if r.status_code > 201:
            return

        content_resp = json.loads(r.text)['generated_messages']
        for content in content_resp:
            messages.append({
                    "From": {
                        "Email": FROM_EMAIL,
                        "Name": FROM_NAME
                    },
                    "To": [
                        {
                        "Email": profile['email'],
                        "Name": profile['first_name']
                        }
                    ],
                    "Subject": content['title'],
                    "TextPart": content['content'],
                    "HTMLPart": ""
                })

    if len(profiles) > 100:
        # chunk profiles in to batches of 100
        batches = list()
        batch = list()
        counter = 0
        for profile in profiles:
            if counter < 100:
                batch.append(profile)
                counter += 1
            else:
                batches.append(batch)
                batch = []
                counter = 0
        for b in batches:
            _get_content(b)
    else:
        _get_content(profiles)

    return { 'Messages': messages }

def send(messages):
    # Send email messages using mail provider of choice. In this demo, we are using mailjet.
    mailjet = Client(auth=(MAIL_JET_API_KEY, MAIL_JET_API_SECRET), version='v3.1')
    result = mailjet.send.create(messages)
    print("Email status code:")
    print(result.status_code)

if __name__ == '__main__':
    messages = generate_email_content(
        get_octy_template(), 
        get_octy_profiles()
    )
    send(messages)

    # python3 retention-email-campaign.py